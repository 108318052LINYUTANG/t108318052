import numpy as np # linear algebra
import pandas as pd
import matplotlib.pyplot as plt

from keras.models import Sequential
from keras.layers import *
from keras.callbacks import *
from sklearn.preprocessing import *
from keras.optimizers import Adam,SGD,RMSprop

data_1=pd.read_csv('C:/Users/YU TANG/Desktop/train-v3.csv') 
X_train = data_1.drop(['price','id'],axis=1).values
Y_train = data_1['price'].values

data_2 = pd.read_csv('C:/Users/YU TANG/Desktop/valid-v3.csv')
X_valid = data_2.drop(['price','id'],axis=1).values
Y_valid = data_2['price'].values

data_3 = pd.read_csv('C:/Users/YU TANG/Desktop/test-v3.csv')
X_test = data_3.drop(['id'],axis=1).values

def scale(train,valid,test):
    tmp = train
    mean, std = tmp.mean(axis=0),tmp.std(axis=0)
    train = (train - mean) /std
    valid = (valid - mean) /std
    test = (test - mean) /std
    return train, valid,test

train_norm = {}
train_norm['price_mean'] = Y_train.mean()
train_norm['price_std'] = Y_train.std()
Y_train = (Y_train - train_norm['price_mean']) / train_norm['price_std']
Y_valid = (Y_valid - train_norm['price_mean']) / train_norm['price_std']
X_train,X_valid,X_test=scale(X_train,X_valid,X_test)


model=Sequential()
model.add(Dense(40,input_dim=21, init='normal', activation='relu'))
model.add(Dense(80,input_dim=40, init='normal', activation='relu'))
model.add(Dense(160,input_dim=80, init='normal', activation='relu'))
model.add(Dense(320,input_dim=160, init='normal', activation='relu'))
model.add(Dense(640,input_dim=320, init='normal', activation='relu'))

model.add(Dense(1, init='normal'))
# optimizer = RMSprop(lr=0.0005, rho=0.9, epsilon=None, decay=0.0)
# optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
optimizer = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)

fn='64_200'
TB=TensorBoard(log_dir='logs/'+fn, histogram_freq=0)


model.compile(loss='MAE',optimizer=optimizer)
his=model.fit(X_train,Y_train,batch_size=64,epochs=200,validation_data=(X_valid,Y_valid),callbacks=[TB])


pred =model.predict(X_test)

pred = pred * train_norm['price_std'] + train_norm['price_mean']
with open('predictions.csv', 'w') as f:
    w = csv.writer(f)
    w.writerow(['id', 'price'])
    for i,y in enumerate(pred, 1):
        w.writerow([i, y[0]])
print(pred)

plt.plot(his.history['loss'])       
plt.plot(his.history['val_loss'])
plt.xlabel('Epochs')
plt.ylabel('Validation Mae')
plt.show()
